name: Deploy Entregas Service

on:
  push:
    branches:
      - main
      - test-workflow

env:
  SERVICE_NAME: entregas-service
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/entregas-service
  K8S_DIR: kubernetes

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Display Java version
        run: |
          echo "Java version:"
          java -version
          echo "Maven version:"
          mvn -version

      - name: Build and test
        run: |
          echo "🚀 Iniciando build del Servicio de Entregas..."
          mvn clean package -DskipTests
          echo "✅ Build completado exitosamente"
          
          echo "🧪 Ejecutando tests..."
          mvn test
          echo "✅ Tests completados"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          echo "🐳 Construyendo imagen Docker..."
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          echo "✅ Imagen Docker construida"
          
          echo "📤 Subiendo imagen a Docker Hub..."
          docker push ${{ env.DOCKER_IMAGE }}:latest
          echo "✅ Imagen subida exitosamente"

      - name: Install Minikube
        run: |
          echo "📦 Instalando Minikube..."
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube version
          echo "✅ Minikube instalado"

      - name: Start Minikube
        run: |
          echo "🚀 Iniciando Minikube..."
          minikube start --driver=docker
          echo "📦 Habilitando addons..."
          minikube addons enable ingress
          minikube addons enable metrics-server
          echo "✅ Minikube iniciado y configurado"

      - name: Deploy Zookeeper first
        run: |
          echo "📦 Desplegando Zookeeper primero..."
          kubectl apply -f ${{ env.K8S_DIR }}/kafka-deployment.yml
          echo "✅ Zookeeper deployment aplicado"
          
          echo "⏳ Esperando a que Zookeeper esté listo..."
          kubectl wait --for=condition=ready pod -l app=zookeeper --timeout=300s
          echo "✅ Zookeeper listo"
          
          echo "📋 Verificando estado de Zookeeper:"
          kubectl get pods -l app=zookeeper
          kubectl logs -l app=zookeeper --tail=10

      - name: Deploy Kafka
        run: |
          echo "📦 Desplegando Kafka..."
          echo "⏳ Esperando a que Kafka esté listo..."
          kubectl wait --for=condition=ready pod -l app=kafka --timeout=300s
          echo "✅ Kafka listo"
          
          echo "📋 Verificando estado de Kafka:"
          kubectl get pods -l app=kafka
          kubectl logs -l app=kafka --tail=10

      - name: Deploy Redis
        run: |
          echo "📦 Desplegando Redis..."
          kubectl apply -f ${{ env.K8S_DIR }}/redis-deployment.yml
          echo "✅ Redis deployment aplicado"
          
          echo "⏳ Esperando a que Redis esté listo..."
          kubectl wait --for=condition=ready pod -l app=redis --timeout=120s
          echo "✅ Redis listo"
          
          echo "📋 Verificando estado de Redis:"
          kubectl get pods -l app=redis

      - name: Verify all services are ready
        run: |
          echo "🔍 Verificando que todos los servicios estén listos..."
          
          echo "📋 Estado de todos los pods:"
          kubectl get pods
          
          echo "📋 Verificando servicios:"
          kubectl get services
          
          echo "⏳ Esperando un poco más para asegurar estabilidad..."
          sleep 30

      - name: Deploy to Minikube
        run: |
          echo "🔧 Configurando entorno de Docker de Minikube..."
          eval $(minikube -p minikube docker-env)
          
          echo "🐳 Construyendo imagen en entorno de Minikube..."
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          echo "✅ Imagen construida en Minikube"
          
          echo "📝 Procesando archivos de Kubernetes..."
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          envsubst < ${{ env.K8S_DIR }}/deployment.yml > ${{ env.K8S_DIR }}/deployment-processed.yml
          echo "✅ Archivos procesados"
          
          echo "🚀 Aplicando manifiestos de Kubernetes..."
          kubectl apply -f ${{ env.K8S_DIR }}/deployment-processed.yml
          kubectl apply -f ${{ env.K8S_DIR }}/service.yml
          echo "✅ Manifiestos aplicados"
          
          echo "📊 Verificando estado de los pods..."
          kubectl get pods
          echo "📋 Detalles de los pods:"
          kubectl describe pods
          
          echo "⏳ Esperando a que el despliegue esté listo..."
          kubectl rollout status deployment/${{ env.SERVICE_NAME }}-deployment --timeout=300s
          echo "✅ Despliegue completado"

      - name: Verify deployment
        run: |
          echo "🔍 Verificando despliegue del Servicio de Entregas (perfil prod)..."
          
          echo "⏳ Esperando a que el servicio esté listo..."
          sleep 60
          
          echo "📊 Estado final de los pods:"
          kubectl get pods -o wide
          
          echo "🌐 Obteniendo IP de Minikube..."
          MINIKUBE_IP=$(minikube ip)
          echo "IP de Minikube: $MINIKUBE_IP"
          
          echo "🏥 Verificando health endpoint..."
          for i in {1..5}; do
            echo "Intento $i de verificación de health..."
            if curl -sSf http://$MINIKUBE_IP:30083/actuator/health; then
              echo "✅ Health endpoint responde correctamente"
              break
            else
              echo "❌ Health endpoint no responde, reintentando..."
              sleep 15
            fi
          done
          
          echo "📈 Verificando prometheus endpoint..."
          curl -sSf http://$MINIKUBE_IP:30083/actuator/prometheus | head -n 5
          echo "✅ Prometheus endpoint verificado"
          
          echo "📚 Verificando Swagger UI..."
          curl -sSf http://$MINIKUBE_IP:30083/doc/swagger-ui.html | head -n 5
          echo "✅ Swagger UI verificado"
          
          echo "🔗 Verificando endpoints de la API..."
          echo "Endpoints disponibles:"
          kubectl logs -l app=entregas-service --tail=50 | grep -i "mapped" || echo "No se encontraron logs de endpoints"

      - name: Verify Kafka and Redis connectivity
        run: |
          echo "🔍 Verificando conectividad con servicios externos..."
          
          echo "📋 Logs de conectividad Kafka:"
          kubectl logs -l app=entregas-service --tail=50 | grep -i "kafka" || echo "No se encontraron logs de Kafka"
          
          echo "📋 Logs de conectividad Redis:"
          kubectl logs -l app=entregas-service --tail=50 | grep -i "redis" || echo "No se encontraron logs de Redis"
          
          echo "📋 Logs de Eureka:"
          kubectl logs -l app=entregas-service --tail=50 | grep -i "eureka" || echo "No se encontraron logs de Eureka"
          
          echo "📋 Estado de Kafka:"
          kubectl get pods -l app=kafka
          
          echo "📋 Estado de Redis:"
          kubectl get pods -l app=redis
          
          echo "📋 Estado de Zookeeper:"
          kubectl get pods -l app=zookeeper

      - name: Display logs on failure
        if: failure()
        run: |
          echo "❌ Workflow falló. Mostrando logs para diagnóstico..."
          echo "📋 Logs del Servicio de Entregas:"
          kubectl logs -l app=entregas-service --tail=150 || echo "No se pudieron obtener logs"
          
          echo "📋 Estado de los pods:"
          kubectl get pods -o wide || echo "No se pudieron obtener pods"
          
          echo "📋 Descripción del deployment:"
          kubectl describe deployment entregas-service-deployment || echo "No se pudo describir deployment"
          
          echo "📋 Eventos del namespace:"
          kubectl get events --sort-by=.metadata.creationTimestamp || echo "No se pudieron obtener eventos"
          
          echo "📋 Logs de Kafka:"
          kubectl logs -l app=kafka --tail=50 || echo "No se pudieron obtener logs de Kafka"
          
          echo "📋 Logs de Zookeeper:"
          kubectl logs -l app=zookeeper --tail=50 || echo "No se pudieron obtener logs de Zookeeper"
          
          echo "📋 Logs de Redis:"
          kubectl logs -l app=redis --tail=50 || echo "No se pudieron obtener logs de Redis"
          
          echo "📋 Verificando conectividad de red:"
          kubectl get services || echo "No se pudieron obtener servicios"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Limpiando recursos..."
          minikube stop
          minikube delete
          echo "✅ Limpieza completada" 
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: gcp-despliegue-desarrollo 
          install_components: 'gke-gcloud-auth-plugin'
      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials cluster-desarrollo --zone us-central1-c --project gcp-despliegue-desarrollo
      - name: Deploy to GKE
        run: |
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          envsubst < ${{ env.K8S_DIR }}/deployment.yml > ${{ env.K8S_DIR }}/deployment-processed.yml
          kubectl apply -f ${{ env.K8S_DIR }}/deployment-processed.yml
          kubectl apply -f ${{ env.K8S_DIR }}/service.yml
          kubectl rollout status deployment/${{ env.SERVICE_NAME }}-deployment --timeout=120s
      - name: Debug deployment failure
        if: failure()
        run: |
          echo "==== PODS ===="
          kubectl get pods -o wide
          
          echo "==== DESCRIBE POD ===="
          kubectl describe pod $(kubectl get pod -l app=${{ env.SERVICE_NAME }} -o jsonpath="{.items[0].metadata.name}")
          
          echo "==== LOGS ===="
          kubectl logs $(kubectl get pod -l app=${{ env.SERVICE_NAME }} -o jsonpath="{.items[0].metadata.name}")
